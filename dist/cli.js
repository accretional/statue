// statue-ssg CLI
// Generated by esbuild


// src/cli.js
import fs3 from "fs-extra";
import path3 from "path";
import { fileURLToPath as fileURLToPath2 } from "url";
import { Command } from "commander";
import chalk from "chalk";

// src/lib/cms/content-processor.js
import fs from "fs";
import path from "path";
import { marked } from "marked";
import matter from "gray-matter";
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined";
if (isBrowser) {
  console.error("content-processor.js should only be used on the server side!");
  throw new Error("Content processor cannot run on the client side!");
}
var scanContentDirectory = () => {
  const contentPath = path.resolve("content");
  const contentEntries = [];
  if (!fs.existsSync(contentPath)) {
    console.warn("Content folder not found!");
    return contentEntries;
  }
  function scanDir(dirPath, relativePath = "") {
    const entries = fs.readdirSync(dirPath);
    for (const entry of entries) {
      const fullPath = path.join(dirPath, entry);
      const entryRelativePath = path.join(relativePath, entry);
      const stats = fs.statSync(fullPath);
      if (stats.isDirectory()) {
        scanDir(fullPath, entryRelativePath);
      } else if (stats.isFile() && entry.endsWith(".md")) {
        const slug = entry.replace(".md", "");
        const url = relativePath ? `/${relativePath}/${slug}`.replace(/\\/g, "/") : `/${slug}`;
        const content = fs.readFileSync(fullPath, "utf-8");
        const { data, content: markdownContent } = matter(content);
        const html = marked.parse(markdownContent);
        let directory = relativePath.replace(/\\/g, "/");
        const mainDirectory = directory.split("/")[0] || "root";
        contentEntries.push({
          slug,
          path: entryRelativePath,
          url,
          directory,
          mainDirectory,
          // Depth of the path
          depth: directory === "" ? 0 : directory.split("/").length,
          content: html,
          metadata: {
            title: data.title || formatTitle(slug),
            description: data.description || "",
            date: data.date || null,
            author: data.author || null,
            ...data
          }
        });
      }
    }
  }
  scanDir(contentPath);
  return contentEntries;
};
var getContentDirectories = () => {
  const contentPath = path.resolve("content");
  const directories = [];
  if (!fs.existsSync(contentPath)) {
    console.warn("Content folder not found!");
    return directories;
  }
  const entries = fs.readdirSync(contentPath);
  for (const entry of entries) {
    const fullPath = path.join(contentPath, entry);
    if (fs.statSync(fullPath).isDirectory()) {
      directories.push({
        name: entry,
        path: `content/${entry}`,
        title: formatTitle(entry),
        url: `/${entry}`
      });
    }
  }
  return directories;
};
var formatTitle = (slug) => {
  return slug.split("-").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
};
var cachedContent = null;
var getAllContent = () => {
  if (cachedContent)
    return cachedContent;
  cachedContent = scanContentDirectory();
  return cachedContent;
};

// src/generator.js
import fs2 from "fs-extra";
import path2 from "path";
import { execSync } from "child_process";
import { fileURLToPath } from "url";
async function generateStaticSite({
  inputDir = "content",
  outputDir = "build",
  template = null,
  verbose = false
} = {}) {
  try {
    console.log("\u{1F4E6} Starting to generate static site...");
    if (!fs2.existsSync(inputDir)) {
      throw new Error(`Input directory "${inputDir}" not found`);
    }
    fs2.ensureDirSync(outputDir);
    fs2.emptyDirSync(outputDir);
    const allContent = getAllContent();
    const directories = getContentDirectories();
    if (verbose) {
      console.log(`\u{1F4C4} Found ${allContent.length} content files`);
      console.log(`\u{1F4C1} Found ${directories.length} directories`);
    }
    try {
      console.log("\u{1F528} Starting SvelteKit build process...");
      execSync("npx vite build", { stdio: "inherit" });
      console.log("\u2705 SvelteKit build completed");
    } catch (error) {
      console.error("\u274C Error during SvelteKit build:", error.message);
      throw new Error("SvelteKit build failed");
    }
    const staticDir = path2.join(inputDir, "static");
    if (fs2.existsSync(staticDir)) {
      fs2.copySync(staticDir, path2.join(outputDir, "static"));
      console.log("\u{1F4C1} Copied static assets");
    }
    console.log(`\u2728 Static site successfully generated: ${outputDir}`);
  } catch (error) {
    console.error("\u274C Error generating static site:", error);
    throw error;
  }
}

// src/cli.js
import { execSync as execSync2 } from "child_process";
var __dirname = path3.dirname(fileURLToPath2(import.meta.url));
var program = new Command();
program.name("statue-ssg").description("Convert markdown content to a static website").version("0.1.2");
program.command("build").description("Build a static site from markdown content").option("-i, --input <directory>", "input content directory", "content").option("-o, --output <directory>", "output directory", "build").option("-t, --template <path>", "custom template directory").option("-v, --verbose", "verbose output").action(async (options) => {
  console.log(chalk.bold.green("Statue SSG - Static Site Generator"));
  try {
    await generateStaticSite({
      inputDir: options.input,
      outputDir: options.output,
      template: options.template,
      verbose: options.verbose
    });
    console.log(chalk.green("\u2728 Static site generated successfully!"));
  } catch (err) {
    console.error(chalk.red("Error:"), err.message);
    process.exit(1);
  }
});
program.command("setup").description("Set up Statue SSG in your SvelteKit project").action(() => {
  var _a, _b;
  try {
    const pkgPath = path3.join(process.cwd(), "package.json");
    if (!fs3.existsSync(pkgPath)) {
      console.error(chalk.red("Error: No package.json found. Please run this command in a SvelteKit project."));
      process.exit(1);
    }
    const pkg = JSON.parse(fs3.readFileSync(pkgPath, "utf8"));
    if (!((_a = pkg.dependencies) == null ? void 0 : _a["@sveltejs/kit"]) && !((_b = pkg.devDependencies) == null ? void 0 : _b["@sveltejs/kit"])) {
      console.warn(chalk.yellow("Warning: This doesn't appear to be a SvelteKit project."));
    }
    console.log(chalk.green("Setting up Statue SSG in your project..."));
    const postinstallPath = path3.resolve(__dirname, "..", "postinstall.js");
    if (fs3.existsSync(postinstallPath)) {
      try {
        console.log(chalk.blue("Running setup script..."));
        execSync2(`node "${postinstallPath}"`, { stdio: "inherit" });
      } catch (err) {
        console.error(chalk.red("Error running setup script:"), err.message);
        console.log(chalk.yellow("For manual setup: node node_modules/statue-ssg/postinstall.js"));
        process.exit(1);
      }
    } else {
      console.error(chalk.red("Error: Setup script not found."));
      console.log(chalk.yellow("Try running: node node_modules/statue-ssg/postinstall.js"));
      process.exit(1);
    }
  } catch (err) {
    console.error(chalk.red("Error during setup:"), err.message);
    process.exit(1);
  }
});
program.command("init").description("Initialize a new Statue SSG project").option("-d, --directory <n>", "project directory name", ".").option("-s, --sveltekit", "initialize with SvelteKit integration").action((options) => {
  const targetDir = path3.resolve(process.cwd(), options.directory);
  try {
    if (options.sveltekit) {
      console.log(chalk.green("Initializing Statue SSG with SvelteKit integration..."));
      if (!fs3.existsSync(path3.join(targetDir, "package.json"))) {
        console.log(chalk.yellow("You are not in a SvelteKit project."));
        console.log(chalk.blue("First create a SvelteKit project:"));
        console.log(chalk.white("npm create svelte@latest my-app"));
        console.log(chalk.white("cd my-app"));
        console.log(chalk.white("npm install"));
        console.log(chalk.white("npm install statue-ssg"));
        process.exit(0);
      }
      try {
        console.log(chalk.blue("Copying Statue SSG files..."));
        const postinstallPath = path3.join(__dirname, "..", "postinstall.js");
        if (fs3.existsSync(postinstallPath)) {
          execSync2(`node "${postinstallPath}"`, { stdio: "inherit" });
        } else {
          console.error(chalk.red("postinstall.js file not found."));
          console.log(chalk.yellow("Setting up manually..."));
          fs3.ensureDirSync(path3.join(targetDir, "content"));
          fs3.ensureDirSync(path3.join(targetDir, "content/blog"));
          fs3.ensureDirSync(path3.join(targetDir, "content/docs"));
          fs3.ensureDirSync(path3.join(targetDir, "content/static"));
          console.log(chalk.green("\u2705 Content folders created."));
        }
      } catch (err) {
        console.error(chalk.red("Error during integration:"), err.message);
      }
      console.log(chalk.green("\u2705 SvelteKit integration completed!"));
      console.log();
      console.log("Next steps:");
      console.log("  1. Install dependencies:", chalk.bold("npm install"));
      console.log("  2. Start development server:", chalk.bold("npm run dev"));
      console.log("  3. Edit content in the content/ directory");
    } else {
      fs3.ensureDirSync(targetDir);
      fs3.ensureDirSync(path3.join(targetDir, "content"));
      fs3.ensureDirSync(path3.join(targetDir, "content/blog"));
      fs3.ensureDirSync(path3.join(targetDir, "content/docs"));
      fs3.ensureDirSync(path3.join(targetDir, "content/static"));
      const exampleContent = `---
title: Hello World
description: Welcome to Statue SSG
date: ${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}
---

# Welcome to Statue SSG

This is an example markdown file.

## Features

- Simple markdown content
- Fast static site generation
- SEO friendly

`;
      fs3.writeFileSync(path3.join(targetDir, "content/blog/hello-world.md"), exampleContent);
      const pkgPath = path3.join(targetDir, "package.json");
      if (!fs3.existsSync(pkgPath)) {
        const pkg = {
          name: path3.basename(targetDir),
          version: "0.0.1",
          description: "A static site built with Statue SSG",
          type: "module",
          scripts: {
            build: "statue-ssg build",
            dev: "statue-ssg build && serve build"
          },
          dependencies: {
            "statue-ssg": "^0.1.2"
          },
          devDependencies: {
            serve: "^14.0.0"
          }
        };
        fs3.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2));
      }
      console.log(chalk.green("\u2705 Statue SSG project initialized!"));
      console.log();
      console.log("Next steps:");
      console.log("  1. Install dependencies:", chalk.bold("npm install"));
      console.log("  2. Build the static site:", chalk.bold("npm run build"));
      console.log("  3. Edit content in the content/ directory");
    }
  } catch (err) {
    console.error(chalk.red("Error:"), err.message);
    process.exit(1);
  }
});
program.parse();
